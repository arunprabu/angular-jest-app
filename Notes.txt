
Expectation
----
  * 48 Hours 
  * Hands-on 
    Explain => Coding => Demo => Try it out => (Tiny Todos)

Reqd Softwares 
----
  * NodeJS V 16+ or 18+ [DONE]
  * Angular CLI v10+ [DONE]
  * VS Code Editor [DONE]
  * Browser of your choice  [DONE]

Skillset
----
  * Angular 2+ (4 months+)

  * Associates without desired skillset 
    1. Manikandan K.B (around 1 month of experience in ng)
    2. Supreetha M (around 10 days of experience in ng)
    3. Sandra K (no experience in ng)

Materials:
-----
  PDF E-Book, 
  Unit Testing in Angular PDF Doc, 
  Source Code in github.com 

=====
Angular Building Blocks
----
  Components 
  Directives 
  Services 
  Guards 
  Pipes 
  Interfaces / Models 
  Classes 
  Interceptors 
  Modules 

============


Calc 
-----
  Resources: FRD, Designs, HLD, LLD 

Software Development
----
  Requirements Analysis 
    Designs 
      Development
        Testing
          Deployment 
            Maintenance 

===============
Req => Designs => Dev => Testing => Deployment => Maintenance 


Development 
-----
  References: FRD, Designs, HLD, LLD 

  * Developers must Prepare Test Cases 
    1. add should receive only numbers as inputs 
    2. add should return only number as output 
    3. ADD button should be disabled if invalid inputs (other than numbers) entered

  Feature: add 
  ----
    function add(a: number, b: number): number {
      return a + b;
    }

    add(10, 20); // 30

  Tools
  ------


Modern Software Dev Methodologies as of 2024 / Testing Approaches 
------
  1. Test-Driven Development (TDD)
      * is a programming practice that instructs devs to write NEW CODE only if an automated test has failed

      Dev writes test cases => (Instant Feedback of Failure) => dev writes functionality => (Instant Feedback of Success) => [CODE COMPLETED]

      Testing Pattern: AAA (Arrange, Act, Assert)
      Tools: JEST, Mocha and Chai 

  2. Behavior-Driven Development (BDD)
      * is an agile dev Methodology 
      * an app is documented and designed around the Behavior the end users want to experience 
      
      Dev writes test cases => (Instant Feedback of Failure) => dev writes functionality => (Instant Feedback of Success) => [CODE COMPLETED]

      Testing Pattern: Given, When, Then 
      Tools: Jasmine JS


Devs write test cases => Devs write functionality => (Tools) => [Success] => Deployment 

============================
Automated Testing 
-----------------
  Levels of Testing 
  -----------
    0. Static Type Checking 
        Tools: TypeScript

    1. Unit Testing [TO LEARN]
        * Testing small independent unit of a component or other building block
        * Testing the building block in isolation (w/o connecting to rest api or service)
        * Individual units would be tested in the building blocks 
        * Bug Reduction Density: 40-80% 

        Tools: 
          JEST JS (Framework and a test runner)  ---- [TO LEARN]
          Jasmine JS (Framework) & Karma (Test Runner)   ---- [NOT LEARNING THIS]
          
    2. Integration Testing
        * Different Units, modules, components tested as combined entity
        * Behavior of the app would be tested 
        * To expose issues in the integration of multiple units 

        Example: testing if the child component can update parent component

        Tools:  
          JEST JS (Framework and a test runner)  
          Jasmine JS (Framework) & Karma (Test Runner)

    3. End to End (E2E) Testing
        * Testing the whole app 
        * multi-step tests combining multiple unit and integration tests into one big test 
        * Usually mocked or stubbed very little 
        * Tests are done in a simulated Browser
        * there may or may not be an UI while the test is running 
        Example: Testing the complete authentication flow 

        Tools: Protractor or CypressJS or Selenium or Puppeteer or Playwright

-------------------

How to write the test cases? 
  AAA Pattern with JEST Syntax
Where to write?  
  in the spec.ts file
How to test our app against the identified test cases?
  ng test 

==============

Removing Jasmine and Karma from Angular App
=========
  Step #1: 
    Uninstall all jasmine, karma and karma plugin packages 
    npm uninstall --save-dev jasmine-core @types/jasmine 
    npm uninstall --save-dev karma 
    npm uninstall --save-dev karma-chrome-launcher karma-coverage karma-jasmine karma-jasmine-html-reporter

  Step #2: 
    Remove test configuration from angular.json file 

  Step #3: 
    (if you have angular verions lesser than 14) 
    Delete karma.config.js file and src/test.ts file
    

Integrating JEST in Angular App
===========
  Step #1: 
    Let's install the necessary packages 

    npm i --save-dev jest jest-preset-angular @types/jest

  Step #2:
    Update package.json scripts: Add the following scripts to your package.json file 
  to run Jest tests:

    "scripts": {
      "test": "jest",
      "test:watch": "jest --watch",
    }

  Step #3:
    Create jest.config.js file with the following lines of code 

    module.exports = {
      preset: "jest-preset-angular",
      roots: ["src"],
      testMatch: ["**/+(*.)+(spec).+(ts)"],
      setupFilesAfterEnv: ["<rootDir>/src/load-jest-preset.ts"],
    };

  Step #4:
    create the file src/load-jest-preset.ts and have the following line of code in it 

    import 'jest-preset-angular';

  Step #5:
    Update tsconfig.spec.json file 

    {
      ......,
      "compilerOptions": {
        "outDir": "./out-tsc/spec",
        "types": [
          "jest" // this was jasmine earlier
        ]
      },
      .....,
      ....,
    }

  Step #6:
  --
    if you have warning related imports when trying npm run test command ,

    fix it in tsconfig.json with the following line 
      "esModuleInterop": true,

  Step #7:
  ----
    Update Angular TestBed configuration (optional): If you are using TestBed 
    in your tests, you might need to configure it to work with Jest. 
    Create a file named src/jest.setup.ts in your src directory with the 
    following content:

    import 'jest-preset-angular/setup-jest';

  Step #8:
    in jest.config.js  update with the following 
    setupFilesAfterEnv: [
      "<rootDir>/src/load-jest-preset.ts",
      "<rootDir>/src/jest.setup.ts",
    ],

========


Naming Conventions & Casing 
----
  Casing Types 
  --------
    1. PascalCase 
        * Recommended for Object Oriented Program's classes 
        * also Recommended for Interface in TypeScript 

        examples 
        ---
          class CarDetails {

          }

          interface Employee {

          }

    2. camelCase 
        * Recommended for variables, const, functions, methods in JS & TS 
        * Recommended for id's of html elements 
        
        examples 
        -----
          var myCar = 'BMW';
          var isLoggedIn = true;

          function getCarInfo() {
            //....
          }
    
    3. kebab-case
        * Recommended for URLs 
        * Recommended for file names, folder names, assets in front end projects  
        * Recommended for css classes 
        * okay for id's of html elements if your architect says ok

        examples 
        -----
          btn-primary
          slideshow-container 
          youtube-logo.png 

    4. snake_case 
        * never ever use this. 
        * okay for const in JS & TS if architect accepts

        examples
        ---
          const MAX_STUDENTS_PER_CLASS = 30;

----------------

Testing Components 
  Testing Component Class 
    variable [DONE]
    method [DONE]
    event handler [DONE]
  Testing Component HTML 
    Static HTML Text [DONE]
    Dynamic HTML Text [DONE] 
  Testing Component styles 
    inline styles [DONE]
    css classes [TODO]
  Testing Reactive Forms [DONE]
  Mocks [DONE] 
  Spy [DONE]
    Refer: https://github.com/arunprabu/unit-testing-ng-june2022/blob/master/src/app/contact/contact.component.spec.ts
           https://github.com/arunprabu/employee-mgmt-oct-sept2022-yamini/blob/master/src/app/employees/components/add-employee/add-employee.component.spec.ts

Router Testing [DONE]
Testing Services [DONE]
Testing Directives [DONE]
Testing Pipes [DONE]
Code Coverage [30 mins]

Two ways to test api calls
----
  1. Mocks 
  2. Spy 

Code Coverage
--------
  Desired Code Coverage: 80% 

========
How to generate coverage reports in JEST Angular App?
=========
To generate code coverage reports for your Angular project using Jest, 
you can follow these general steps:
If you want the coverage report in HTML format, you can follow these steps:

Step 1:
-----
  Install Coverage Report HTML Generator:
  Ensure you have the necessary dependencies installed.
  Install the istanbul-reports package:

    npm install --save-dev istanbul-reports

Step 2:
-------
  Update Jest Configuration:
  Update your Jest configuration (jest.config.js) to use the HTML coverage reporter:

  // jest.config.js
    module.exports = {
      preset: 'jest-preset-angular',
      setupFilesAfterEnv: ['<rootDir>/src/jest.setup.ts'],
      collectCoverage: true,
      coverageDirectory: '<rootDir>/coverage',
      coverageReporters: ['lcov', 'html'],
      // ... other configurations
    };

  coverageReporters specifies the coverage reporters to use. 
  Adding 'html' will generate an HTML coverage report.

Step 3:
-------
  Run Tests with Coverage:
  Execute your tests with coverage by running:
    npm test -- --coverage

  This will run your tests and generate code coverage reports, 
  including an HTML report.

  Viewing HTML Report:
  After running the tests, you can find the HTML coverage report in the 
  coverage directory. 
  Open the HTML report (index.html) in your browser to view detailed coverage information.

    open coverage/lcov-report/index.html

  This will open a detailed HTML coverage report in your default web browser.

  By configuring coverageReporters to include 'html', Jest will generate the 
  HTML coverage report alongside other coverage reports. 
  Adjust the configuration according to your project structure and requirements.

=======

Todos
----
  1. Test the h1 content in home comp 
  2. Test the paragraph text in home comp 
  3. Test whether the btn-primary css class exists in a button in home comp 
  4. Write test for subtract, multiply, divide in calc.comp 
  5. test mouseleave in colorizer Directive
  6. Learn about negative mocking using jest in angular in add-user.comp 
  7. check whether virat kohli is displayed in html element of list-users.comp 


======
To Fix the warning after integrating highcharts 
try adding 
  "allowedCommonJsDependencies": [
    "highcharts"
  ] 
in angular.json
=======


restaurant (offering food service)
--
  * subscribers sitting 
    * (waiter comes to the table)
      * we are placing our orders 
        * go to the kitchen and place our orders 
          * waiting for our prepared food from kitchen 
            * kitchen will deliver the food to the waiter, who will enrich the food
              * waiter will take the food to our and deliver 
                * we will consume 



 What's Observable?
  It's a collection that returned over time. 
  It's a push, that sends multiple values
  Observable is like restaurant kitchen.
  If you subscribe to observable, it decides when to give information 

-----
Operators
----
  * will operate on source data of the observables 
  * may alter, sort, filter, add, remove, update, 